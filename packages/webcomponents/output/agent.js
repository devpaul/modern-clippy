!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}([function(t,e,n){"use strict";(function(t){const n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:void 0;e.a=n}).call(this,n(3))},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{l(o.next(t))}catch(t){i(t)}}function s(t){try{l(o.throw(t))}catch(t){i(t)}}function l(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,s)}l((o=o.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const r=n(6),i=n(2),a=n(4).default,s=n(5);function l(t,e){if(null==t)throw new Error(e);return t}e.Agent=class extends HTMLElement{constructor(){super(),this._mute=!1;const t=this.attachShadow({mode:"open"}),e=document.createElement("template");e.innerHTML=s;const n=e.content.cloneNode(!0);this._overlays=l(n.querySelector("#overlays"),"missing overlay container"),this._speech=l(n.querySelector("#speech"),"missing speech container"),l(n.querySelector("slot"),"missing slot").addEventListener("slotchange",t=>{this._onSlotChange(t)});const o=document.createElement("style");o.textContent=a,t.appendChild(o),t.appendChild(n)}static get observedAttributes(){return["bundle","mute"]}get actions(){return Object.keys(this._config.animations)}get current(){return this._control&&this._control.action}attributeChangedCallback(t,e,n){switch(t){case"bundle":this.load(n);break;case"mute":this._mute="true"===n}}load(t){return o(this,void 0,void 0,function*(){if("string"==typeof t){console.log(`loading ${t} bundle`);const e=yield fetch(t);t=yield e.json()}for(this._config=t;this._overlays.firstChild;)this._overlays.removeChild(this._overlays.firstChild);for(let e=t.overlayCount;e>0;e--)this._createOverlay();this._overlays.style.height=t.frameSize.height+"px",this._overlays.style.width=t.frameSize.width+"px",this._soundBoard=yield i.default.load(t.soundPack),this.play("Show")})}play(t){const e=this._config.animations[t];if(!e)throw new Error(`Action ${t} does not exist`);this._control&&this._control.stopImmediately(),this.dispatchEvent(new CustomEvent("actionStart",{detail:{action:t}}));let n=0;return this._control=Object.assign({action:t},r.animator(e,e=>{const{images:o=[]}=e;this._setFrames(o);for(let t=o.length;t<this._config.overlayCount;t++)this._hideFrame(t);!this._mute&&e.sound&&this._soundBoard.play(String(e.sound)),this.dispatchEvent(new CustomEvent("frame",{detail:{action:t,frame:e,time:n}})),n+=e.duration})),this._control.done.finally(()=>{this.dispatchEvent(new CustomEvent("actionEnd",{detail:{action:t}})),this._control=void 0}),this._control}playIdle(){const t=this.actions.filter(t=>"Idle"===t.substr(0,4));this.play(t[Math.floor(Math.random()*t.length)])}stop(){this._control&&this._control.stop()}stopImmediately(){this._control&&this._control.stopImmediately()}_createOverlay(){const{characterMap:t,frameSize:{width:e,height:n}}=this._config,o=document.createElement("div");o.style.width=e+"px",o.style.height=n+"px",o.style.backgroundImage=`url(${t})`,o.style.display="none",this._overlays.appendChild(o)}_hideFrame(t=0){const e=this._overlays.children[t];e&&(e.style.display="none")}_onSlotChange(t){const e=t.target;this._speech.style.visibility=e.assignedElements().length?"visible":"hidden",this._speech.style.left=.75*this._config.frameSize.width+"px"}_setFrame(t,e,n=0){const{width:o,height:r}=this._config.frameSize,i=this._overlays.children[n];if(t%o==0&&e%r==0||console.warn(`frame ${t},${e} is not a multiple of frame size ${o},${r}`),!i)throw new Error(`Missing overlay ${n}`);i.style.display="block",i.style.backgroundPositionX=-t+"px",i.style.backgroundPositionY=-e+"px",i.style.position="absolute",i.style.top="0",i.style.left="0"}_setFrames(t){if(t)for(let e=0;e<t.length;e++){const[n,o]=t[e];this._setFrame(n,o,e)}}}},function(t,e,n){"use strict";n.r(e),n.d(e,"SoundBoard",function(){return l}),n.d(e,"CoreAudio",function(){return c});var o=n(0),r=function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{l(o.next(t))}catch(t){i(t)}}function s(t){try{l(o.throw(t))}catch(t){i(t)}}function l(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,s)}l((o=o.apply(t,e||[])).next())})};const i=o.a.AudioContext||o.a.webkitAudioContext,a=new Map([["mp3","audio/mpeg"],["ogg","audio/ogg"]]),s=document.createElement("audio");class l{constructor(t,e){this.context=t,this.effects=e}play(t){const e=this.effects[t];if(e){"suspended"===this.context.state&&this.context.resume();const t=this.context.createBufferSource();t.buffer=e,t.connect(this.context.destination),t.start()}else console.warn(`Soundboard missing effect for ${t}`)}}class c{constructor(t=new i){this.context=t}get suspended(){return"suspended"===this.context.state}resume(){this.context.resume()}load(t){return r(this,void 0,void 0,function*(){const e={};return Object.keys(t).forEach(n=>r(this,void 0,void 0,function*(){const o=t[n];this.canPlay(n)&&(console.log("loading "+n),yield this.loadSoundPack(e,o))})),new l(this.context,e)})}loadSound(t){return r(this,void 0,void 0,function*(){const e=yield fetch(t),n=yield e.arrayBuffer();return this.context.decodeAudioData(n)})}canPlay(t){const e=a.get(t)||t;return s.canPlayType(e)}loadSoundPack(t,e){return Promise.all(Object.keys(e).map(n=>r(this,void 0,void 0,function*(){if(!t[n])try{t[n]=yield this.loadSound(e[n])}catch(t){console.warn(`failed to load audio ${n}`)}})))}}e.default=new c},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e),e.default=':host {\n\t--bg-color: #FFC;\n\t--border-color: black;\n\t--text-color: #333;\n\t--triangle-height: 13px;\n\t--triangle-base: 26px;\n\t--triangle-placement: 40px;\n\t--triangle-vertical-placement: 10px;\n\t--triangle-border: 1px;\n\t--speech-min-width: 40px;\n\t--speech-min-height: 40px;\n}\n\n.root {\n\tposition: relative;\n}\n\n#overlays {\n\tposition: relative;\n}\n\n#overlays > * {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n}\n\n/* =========================================================================================================\n * SPEECH BUBBLE\n*/\n\n#speech {\n\tvisibility: hidden;\n\tposition: absolute;\n\tdisplay: block;\n\tz-index: 1000;\n\tmin-width: var(--speech-min-width);\n\tmin-height: var(--speech-min-height)\n}\n\n.bubble {\n\tposition: relative;\n\tpadding: 15px;\n\tmargin: 1em 0 3em;\n\tborder: var(--triangle-border) solid var(--border-color);\n\tcolor: var(--text-color);\n\tbackground: var(--bg-color);\n\tborder-radius: 10px;\n}\n\n/* BOTTOM TRIANGLE */\n\n/* outer triangle border */\n.bottom.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\tbottom: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tleft: var(--triangle-placement);\n\tborder-width: calc(var(--triangle-height) + var(--triangle-border)) calc(var(--triangle-border) + var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: var(--border-color) transparent;\n}\n\n/* creates the smaller  triangle */\n.bottom.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\tbottom: calc(-1 * var(--triangle-height));\n\tleft: calc(var(--triangle-placement) + var(--triangle-border));\n\tborder-width: var(--triangle-height) calc(var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: var(--bg-color) transparent;\n}\n\n/* LEFT TRIANGLE */\n\n.left.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\ttop: var(--triangle-vertical-placement);\n\tleft: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tborder-width: calc(var(--triangle-border) + var(--triangle-base) / 2) calc(var(--triangle-height) + var(--triangle-border)) calc(var(--triangle-border) + var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: transparent var(--border-color) transparent;\n}\n\n.left.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: calc(var(--triangle-vertical-placement) + var(--triangle-border));\n\tleft: calc(-1 * var(--triangle-height));\n\tborder-width: 50px 145px 50px 0;\n\tborder-width: calc(var(--triangle-base) / 2) var(--triangle-height) calc(var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: transparent var(--bg-color) transparent;\n}\n\n/* RIGHT TRIANGLE */\n\n/* TOP TRIANGLE */\n\n.speech-bubble-left:after {\n\tcontent: \'\';\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\twidth: 0;\n\theight: 0;\n\tborder: 20px solid transparent;\n\tborder-left-color: #ffffbb;\n\tborder-right: 0;\n\tborder-bottom: 0;\n\tmargin-top: -10px;\n\tmargin-right: -20px;\n}\n'},function(t,e){t.exports='<div class=root> <div id=speech class="bubble left"> <slot name=""> </slot> </div> <div id=overlays> </div> </div> '},function(t,e,n){"use strict";function o(t){return new Promise(e=>{setTimeout(e,t)})}n.r(e),n.d(e,"stepper",function(){return a}),n.d(e,"animator",function(){return s});var r=function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{l(o.next(t))}catch(t){i(t)}}function s(t){try{l(o.throw(t))}catch(t){i(t)}}function l(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,s)}l((o=o.apply(t,e||[])).next())})};function i(t){let e=100*Math.random();for(const n of t)if((e-=n.weight)<=0)return n.frameIndex}function*a(t){let e=0,n=t.frames,o=!1;for(;e<n.length;){let t=n[e];(o=!!(yield t)||o)&&t.exitBranch?e=t.exitBranch:t.branching?e=i(t.branching.branches)||e+1:e++}}function s(t,e){const n=a(t);let i,s=!1,l=!1;const c=Promise.race([(()=>r(this,void 0,void 0,function*(){for(let{done:t,value:r}=n.next(s);!l&&!t;({done:t,value:r}=n.next(s)))e(r),yield o(r.duration)}))(),new Promise(t=>{i=t})]);return{done:c,stop:()=>(s=!1,c),stopImmediately(){l=!0,i()}}}},,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(1);customElements.define("modern-agent",o.Agent),e.default=o.Agent}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,