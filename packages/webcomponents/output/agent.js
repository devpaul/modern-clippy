!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";(function(t){const n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:void 0;e.a=n}).call(this,n(3))},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))(function(i,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}c((o=o.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const i=n(6),r=n(2),s=n(4).default,a=n(5);function c(t,e){if(null==t)throw new Error(e);return t}e.Agent=class extends HTMLElement{constructor(){super(),this._mute=!1;const t=this.attachShadow({mode:"open"}),e=document.createElement("template");e.innerHTML=a;const n=e.content.cloneNode(!0);this._overlays=c(n.querySelector("#overlays"),"missing overlay container"),this._speech=c(n.querySelector("#speech"),"missing speech container"),c(n.querySelector("slot"),"missing slot").addEventListener("slotchange",t=>{this._onSlotChange(t)});const o=document.createElement("style");o.textContent=s,t.appendChild(o),t.appendChild(n)}static get observedAttributes(){return["bundle","mute"]}get actions(){return Object.keys(this._config.animations)}get current(){return this._control&&this._control.action}attributeChangedCallback(t,e,n){switch(t){case"bundle":console.warn(`loading ${n} not implemented`);break;case"mute":this._mute="true"===n}}load(t){return o(this,void 0,void 0,function*(){for(this._config=t;this._overlays.firstChild;)this._overlays.removeChild(this._overlays.firstChild);for(let e=t.overlayCount;e>0;e--)this._createOverlay();this._overlays.style.height=t.frameSize.height+"px",this._overlays.style.width=t.frameSize.width+"px",this._soundBoard=yield r.default.load(t.soundPack),this.play("Show")})}play(t){const e=this._config.animations[t];if(!e)throw new Error(`Action ${t} does not exist`);this._control&&this._control.stopImmediately(),this.dispatchEvent(new CustomEvent("actionStart",{detail:{action:t}}));let n=0;return this._control=Object.assign({action:t},i.animator(e,e=>{const{images:o=[]}=e;this._setFrames(o);for(let t=o.length;t<this._config.overlayCount;t++)this._hideFrame(t);!this._mute&&e.sound&&this._soundBoard.play(String(e.sound)),this.dispatchEvent(new CustomEvent("frame",{detail:{action:t,frame:e,time:n}})),n+=e.duration})),this._control.done.finally(()=>{this.dispatchEvent(new CustomEvent("actionEnd",{detail:{action:t}})),this._control=void 0}),this._control}playIdle(){const t=this.actions.filter(t=>"Idle"===t.substr(0,4));this.play(t[Math.floor(Math.random()*t.length)])}stop(){this._control&&this._control.stop()}stopImmediately(){this._control&&this._control.stopImmediately()}_createOverlay(){const{characterMap:t,frameSize:{width:e,height:n}}=this._config,o=document.createElement("div");o.style.width=e+"px",o.style.height=n+"px",o.style.backgroundImage=`url(${t})`,o.style.display="none",this._overlays.appendChild(o)}_hideFrame(t=0){const e=this._overlays.children[t];e&&(e.style.display="none")}_onSlotChange(t){this._speech.style.visibility="visible",console.log("slot",t)}_setFrame(t,e,n=0){const{width:o,height:i}=this._config.frameSize,r=this._overlays.children[n];if(t%o==0&&e%i==0||console.warn(`frame ${t},${e} is not a multiple of frame size ${o},${i}`),!r)throw new Error(`Missing overlay ${n}`);r.style.display="block",r.style.backgroundPositionX=-t+"px",r.style.backgroundPositionY=-e+"px",r.style.position="absolute",r.style.top="0",r.style.left="0"}_setFrames(t){if(t)for(let e=0;e<t.length;e++){const[n,o]=t[e];this._setFrame(n,o,e)}}}},function(t,e,n){"use strict";n.r(e),n.d(e,"SoundBoard",function(){return l}),n.d(e,"CoreAudio",function(){return u});var o=n(0),i=function(t,e,n,o){return new(n||(n=Promise))(function(i,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}c((o=o.apply(t,e||[])).next())})},r=function(t,e){var n={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(t);i<o.length;i++)e.indexOf(o[i])<0&&(n[o[i]]=t[o[i]])}return n};const s=o.a.AudioContext||o.a.webkitAudioContext,a=new Map([["mp3","audio/mpeg"],["ogg","audio/ogg"]]),c=document.createElement("audio");class l{constructor(t,e){this.context=t,this.effects=e}play(t){const e=this.effects[t];if(e){"suspended"===this.context.state&&this.context.resume();const t=this.context.createBufferSource();t.buffer=e,t.connect(this.context.destination),t.start()}else console.warn(`Soundboard missing effect for ${t}`)}}class u{constructor(t=new s){this.context=t}get suspended(){return"suspended"===this.context.state}resume(){this.context.resume()}load(t){const{mp3:e,ogg:n}=t,o=r(t,["mp3","ogg"]);if(e&&this.canPlay("mp3"))return this.loadSoundPack(e);if(n&&this.canPlay("ogg"))return this.loadSoundPack(n);for(let t in o)if(this.canPlay(t))return this.loadSoundPack(o[t]);return Promise.reject(new Error("Cannot load audio. No valid type."))}canPlay(t){const e=a.get(t)||t;return c.canPlayType(e)}loadSoundPack(t){const e={},n=Object.keys(t).map(n=>{const o=t[n];return new Promise(t=>i(this,void 0,void 0,function*(){const i=yield fetch(o),r=yield i.arrayBuffer(),s=yield this.context.decodeAudioData(r);e[n]=s,t(s)}))});return Promise.all(n).then(()=>new l(this.context,e))}}e.default=new u},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e),e.default=".root {\n\tposition: relative;\n}\n\n#speech {\n\tvisibility: hidden;\n\tposition: absolute;\n\tdisplay: block;\n\tbackground-color: #FFC;\n\tpadding: 8px;\n\tz-index: 1000;\n\tborder: 1px solid black;\n\tborder-radius: 5px;\n}\n\n.speech-bubble-left:after {\n\tcontent: '';\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\twidth: 0;\n\theight: 0;\n\tborder: 20px solid transparent;\n\tborder-left-color: #ffffbb;\n\tborder-right: 0;\n\tborder-bottom: 0;\n\tmargin-top: -10px;\n\tmargin-right: -20px;\n}\n\n.content {\n\tmax-width: 200px;\n\tmin-width: 120px;\n\tfont-family: \"Microsoft Sans\", sans-serif;\n\tfont-size: 10pt;\n}\n\n#overlays {\n\tposition: relative;\n}\n\n#overlays > * {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n}\n"},function(t,e){t.exports='<div class=root> <div id=speech class=speech-bubble-left> <slot name="" class=content> </slot> </div> <div id=overlays> </div> </div> '},function(t,e,n){"use strict";function o(t){return new Promise(e=>{setTimeout(e,t)})}n.r(e),n.d(e,"stepper",function(){return s}),n.d(e,"animator",function(){return a});var i=function(t,e,n,o){return new(n||(n=Promise))(function(i,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}c((o=o.apply(t,e||[])).next())})};function r(t){let e=100*Math.random();for(const n of t)if((e-=n.weight)<=0)return n.frameIndex}function*s(t){let e=0,n=t.frames,o=!1;for(;e<n.length;){let t=n[e];(o=!!(yield t)||o)&&t.exitBranch?e=t.exitBranch:t.branching?e=r(t.branching.branches)||e+1:e++}}function a(t,e){const n=s(t);let r,a=!1,c=!1;const l=Promise.race([(()=>i(this,void 0,void 0,function*(){for(let{done:t,value:i}=n.next(a);!c&&!t;({done:t,value:i}=n.next(a)))e(i),yield o(i.duration)}))(),new Promise(t=>{r=t})]);return{done:l,stop:()=>(a=!1,l),stopImmediately(){c=!0,r()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,