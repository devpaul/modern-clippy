!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";(function(t){const n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:void 0;e.a=n}).call(this,n(4))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(2);customElements.define("modern-agent",o.Agent),e.default=o.Agent},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{s(o.next(t))}catch(t){i(t)}}function l(t){try{s(o.throw(t))}catch(t){i(t)}}function s(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,l)}s((o=o.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const r=n(9),i=n(3),a=n(5),l=n(6);function s(t){return null!=t?`${t}px`:null}e.Agent=class extends HTMLElement{constructor(){super(),this._mute=!1;const t=this.attachShadow({mode:"open"});t.appendChild(l.loadStyles()),t.appendChild(l.loadTemplate());const e=this._speech.querySelector("slot");e&&e.addEventListener("slotchange",t=>{this._onSlotChange(t)})}static get observedAttributes(){return["bundle","mute","dialog"]}get actions(){return Object.keys(this._config.animations)}get current(){return this._control&&this._control.action}attributeChangedCallback(t,e,n){switch(t){case"bundle":this.load(n);break;case"mute":this._mute="true"===n;break;case"dialog":const e=a.isRelativePosition(n)?a.getPosition(n,this._config.frameSize):a.parsePosition(n);this._setDialogPosition(e)}}load(t){return o(this,void 0,void 0,function*(){if("string"==typeof t){console.log(`loading ${t} bundle`);const e=yield fetch(t);t=yield e.json()}for(t.license&&(console.log("==========================================================="),console.log("BUNDLE LICENSE"),console.log(t.license),console.log("===========================================================")),this._config=t;this._overlays.firstChild;)this._overlays.removeChild(this._overlays.firstChild);for(let e=t.overlayCount;e>0;e--)this._createOverlay();this._overlays.style.height=s(t.frameSize.height),this._overlays.style.width=s(t.frameSize.width),this._resetDialogPosition(),this._soundBoard=yield i.default.load(t.soundPack),this.play("Show"),this.dispatchEvent(new CustomEvent("loaded"))})}play(t){const e=this._config.animations[t];if(!e)throw new Error(`Action ${t} does not exist`);this._control&&this._control.stopImmediately(),this.dispatchEvent(new CustomEvent("actionStart",{detail:{action:t}}));let n=0;return this._control=Object.assign({action:t},r.animator(e,e=>{const{images:o=[]}=e;this._setFrames(o);for(let t=o.length;t<this._config.overlayCount;t++)this._hideFrame(t);!this._mute&&e.sound&&this._soundBoard.play(String(e.sound)),this.dispatchEvent(new CustomEvent("frame",{detail:{action:t,frame:e,time:n}})),n+=e.duration})),this._control.done.finally(()=>{this.dispatchEvent(new CustomEvent("actionEnd",{detail:{action:t}})),this._control=void 0}),this._control}playIdle(){const t=this.actions.filter(t=>"Idle"===t.substr(0,4));this.play(t[Math.floor(Math.random()*t.length)])}stop(){this._control&&this._control.stop()}stopImmediately(){this._control&&this._control.stopImmediately()}get _overlays(){return this.shadowRoot.querySelector("#overlays")}get _speech(){return this.shadowRoot.querySelector("#speech")}_createOverlay(){const{characterMap:t,frameSize:{width:e,height:n}}=this._config,o=document.createElement("div");o.style.width=s(e),o.style.height=s(n),o.style.backgroundImage=`url(${t})`,o.style.display="none",this._overlays.appendChild(o)}_hideFrame(t=0){const e=this._overlays.children[t];e&&(e.style.display="none")}_onSlotChange(t){const e=t.target;this._speech.style.visibility=e.assignedElements().length?"visible":"hidden"}_resetDialogPosition(){const t=this.getAttribute("dialog");if(t)try{const e=a.isRelativePosition(t)?a.getPosition(t,this._config.frameSize):a.parsePosition(t);return void this._setDialogPosition(e)}catch(t){}this._setDialogPosition(a.getPosition("left",this._config.frameSize))}_setDialogPosition(t){const e=this._speech;e.classList.remove("left","right","top","bottom"),e.classList.add(t.placement),e.style.top=s(t.top),e.style.bottom=s(t.bottom),e.style.left=s(t.left),e.style.right=s(t.right)}_setFrame(t,e,n=0){const{width:o,height:r}=this._config.frameSize,i=this._overlays.children[n];if(t%o==0&&e%r==0||console.warn(`frame ${t},${e} is not a multiple of frame size ${o},${r}`),!i)throw new Error(`Missing overlay ${n}`);i.style.display="block",i.style.backgroundPositionX=s(-t),i.style.backgroundPositionY=s(-e),i.style.position="absolute",i.style.top="0",i.style.left="0"}_setFrames(t){if(t)for(let e=0;e<t.length;e++){const[n,o]=t[e];this._setFrame(n,o,e)}}}},function(t,e,n){"use strict";n.r(e),n.d(e,"SoundBoard",function(){return s}),n.d(e,"CoreAudio",function(){return c});var o=n(0),r=function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{s(o.next(t))}catch(t){i(t)}}function l(t){try{s(o.throw(t))}catch(t){i(t)}}function s(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,l)}s((o=o.apply(t,e||[])).next())})};const i=o.a.AudioContext||o.a.webkitAudioContext,a=new Map([["mp3","audio/mpeg"],["ogg","audio/ogg"]]),l=document.createElement("audio");class s{constructor(t,e){this.context=t,this.effects=e}play(t){const e=this.effects[t];if(e){"suspended"===this.context.state&&this.context.resume();const t=this.context.createBufferSource();t.buffer=e,t.connect(this.context.destination),t.start()}else console.warn(`Soundboard missing effect for ${t}`)}}class c{constructor(t=new i){this.context=t}get suspended(){return"suspended"===this.context.state}resume(){this.context.resume()}load(t){return r(this,void 0,void 0,function*(){const e={};return Object.keys(t).forEach(n=>r(this,void 0,void 0,function*(){const o=t[n];this.canPlay(n)&&(console.log("loading "+n),yield this.loadSoundPack(e,o))})),new s(this.context,e)})}loadSound(t){return r(this,void 0,void 0,function*(){const e=yield fetch(t),n=yield e.arrayBuffer();return this.context.decodeAudioData(n)})}canPlay(t){const e=a.get(t)||t;return l.canPlayType(e)}loadSoundPack(t,e){return Promise.all(Object.keys(e).map(n=>r(this,void 0,void 0,function*(){if(!t[n])try{t[n]=yield this.loadSound(e[n])}catch(t){console.warn(`failed to load audio ${n}`)}})))}}e.default=new c},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";function o(t){return null==t||"number"==typeof t}Object.defineProperty(e,"__esModule",{value:!0}),e.isRelativePosition=function(t){return"left"===t||"right"===t||"top"===t||"bottom"===t},e.parsePosition=function(t){if("string"==typeof t&&(t=JSON.parse(t)),function(t){return t&&"object"==typeof t&&"string"==typeof t.placement&&o(t.top)&&o(t.bottom)&&o(t.right)&&o(t.left)}(t))return t;throw new Error("Invalid position")},e.getPosition=function(t,e){switch(t){case"right":return function(t){return{placement:"right",top:0,right:Math.floor(-.75*t.width)}}(e);case"bottom":return function(t){return{placement:"bottom",bottom:Math.floor(-1.1*t.height)}}(e);case"top":return function(t){return{placement:"top",top:Math.floor(-.75*t.height)}}(e);default:return function(t){return{placement:"left",top:0,left:Math.floor(-.75*t.width)}}(e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(7).default,r=n(8);function i(t,e){if(null==t)throw new Error(e);return t}e.loadTemplate=function(){const t=document.createElement("template");t.innerHTML=r;const e=t.content.cloneNode(!0);return i(e.querySelector("#overlays"),"missing overlay container"),i(e.querySelector("#speech"),"missing speech container"),i(e.querySelector("slot"),"missing slot"),e},e.loadStyles=function(){const t=document.createElement("style");return t.textContent=o,t}},function(t,e,n){"use strict";n.r(e),e.default=':host {\n\t--bg-color: #FFC;\n\t--border-color: black;\n\t--text-color: #333;\n\t--triangle-height: 13px;\n\t--triangle-base: 26px;\n\t--triangle-placement: 40px;\n\t--triangle-vertical-placement: 10px;\n\t--triangle-border: 1px;\n\t--speech-min-width: 40px;\n\t--speech-min-height: 40px;\n}\n\n.root {\n\tposition: relative;\n}\n\n#overlays {\n\tposition: relative;\n}\n\n#overlays > * {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n}\n\n/* =========================================================================================================\n * SPEECH BUBBLE\n*/\n\n#speech {\n\tvisibility: hidden;\n\tposition: absolute;\n\tdisplay: block;\n\tz-index: 1000;\n\tmin-width: var(--speech-min-width);\n\tmin-height: var(--speech-min-height)\n}\n\n.bubble {\n\tposition: relative;\n\tpadding: 15px;\n\tmargin: 1em 0 3em;\n\tborder: var(--triangle-border) solid var(--border-color);\n\tcolor: var(--text-color);\n\tbackground: var(--bg-color);\n\tborder-radius: 10px;\n}\n\n/* TOP DIALOG (bottom triangle) */\n\n/* outer triangle border */\n.top.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\tbottom: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tleft: var(--triangle-placement);\n\tborder-width: calc(var(--triangle-height) + var(--triangle-border)) calc(var(--triangle-border) + var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: var(--border-color) transparent;\n}\n\n/* creates the smaller triangle */\n.top.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\tbottom: calc(-1 * var(--triangle-height));\n\tleft: calc(var(--triangle-placement) + var(--triangle-border));\n\tborder-width: var(--triangle-height) calc(var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: var(--bg-color) transparent;\n}\n\n/* RIGHT DIALOG (left triangle) */\n\n.right.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\ttop: var(--triangle-vertical-placement);\n\tleft: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tborder-width: calc(var(--triangle-border) + var(--triangle-base) / 2) calc(var(--triangle-height) + var(--triangle-border)) calc(var(--triangle-border) + var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: transparent var(--border-color) transparent;\n}\n\n.right.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: calc(var(--triangle-vertical-placement) + var(--triangle-border));\n\tleft: calc(-1 * var(--triangle-height));\n\tborder-width: 50px 145px 50px 0;\n\tborder-width: calc(var(--triangle-base) / 2) var(--triangle-height) calc(var(--triangle-base) / 2) 0;\n\tborder-style: solid;\n\tborder-color: transparent var(--bg-color) transparent;\n}\n\n/* LEFT DIALOG (right triangle) */\n\n.left.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\ttop: var(--triangle-vertical-placement);\n\tright: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tborder-width: calc(var(--triangle-border) + var(--triangle-base) / 2) 0 calc(var(--triangle-border) + var(--triangle-base) / 2) calc(var(--triangle-height) + var(--triangle-border));\n\tborder-style: solid;\n\tborder-color: transparent var(--border-color) transparent;\n}\n\n.left.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: calc(var(--triangle-vertical-placement) + var(--triangle-border));\n\tright: calc(-1 * var(--triangle-height));\n\tborder-width: 50px 145px 50px 0;\n\tborder-width: calc(var(--triangle-base) / 2) 0 calc(var(--triangle-base) / 2) var(--triangle-height);\n\tborder-style: solid;\n\tborder-color: transparent var(--bg-color) transparent;\n}\n\n/* BOTTOM DIALOG (top triangle) */\n\n/* outer triangle border */\n.bottom.bubble:before {\n\tcontent: "";\n\tposition: absolute;\n\ttop: calc(-1 * (var(--triangle-height) + var(--triangle-border)));\n\tleft: var(--triangle-placement);\n\tborder-width: 0 calc(var(--triangle-border) + var(--triangle-base) / 2) calc(var(--triangle-height) + var(--triangle-border));\n\tborder-style: solid;\n\tborder-color: var(--border-color) transparent;\n}\n\n/* creates the smaller triangle */\n.bottom.bubble:after {\n\tcontent: "";\n\tposition: absolute;\n\ttop: calc(-1 * var(--triangle-height));\n\tleft: calc(var(--triangle-placement) + var(--triangle-border));\n\tborder-width: 0 calc(var(--triangle-base) / 2) var(--triangle-height);\n\tborder-style: solid;\n\tborder-color: var(--bg-color) transparent;\n}\n'},function(t,e){t.exports='<div class=root> <div id=speech class="bubble left"> <slot name=""> </slot> </div> <div id=overlays> </div> </div> '},function(t,e,n){"use strict";function o(t){return new Promise(e=>{setTimeout(e,t)})}n.r(e),n.d(e,"stepper",function(){return a}),n.d(e,"animator",function(){return l});var r=function(t,e,n,o){return new(n||(n=Promise))(function(r,i){function a(t){try{s(o.next(t))}catch(t){i(t)}}function l(t){try{s(o.throw(t))}catch(t){i(t)}}function s(t){t.done?r(t.value):new n(function(e){e(t.value)}).then(a,l)}s((o=o.apply(t,e||[])).next())})};function i(t){let e=100*Math.random();for(const n of t)if((e-=n.weight)<=0)return n.frameIndex}function*a(t){let e=0,n=t.frames,o=!1;for(;e<n.length;){let t=n[e];(o=!!(yield t)||o)&&t.exitBranch?e=t.exitBranch:t.branching?e=i(t.branching.branches)||e+1:e++}}function l(t,e){const n=a(t);let i,l=!1,s=!1;const c=Promise.race([(()=>r(this,void 0,void 0,function*(){for(let{done:t,value:r}=n.next(l);!s&&!t;({done:t,value:r}=n.next(l)))e(r),yield o(r.duration)}))(),new Promise(t=>{i=t})]);return{done:c,stop:()=>(l=!1,c),stopImmediately(){s=!0,i()}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,